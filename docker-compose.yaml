version: '3'
services:

  ########################################################## RabbitMQ
  rabbitmq:
    container_name: RabbitMQ
    hostname: rabbitmq
    build: 
      context: ./rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia
    ports:
      - "15672:15672" #management
      - "15692:15692" #prometheus
      - "5672:5672"   #amqp
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://localhost:15672 || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5         
    networks:
      - poc-elastic-network
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: bitnami
      RABBITMQ_DEFAULT_VHOST: dev
  ########################################################## Elastic
  elasticsearch:
    container_name: ElasticSearch
    hostname: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.0-amd64 
    environment: 
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - network.host=0.0.0.0
      - cluster.name="elastic_stack_logging"
      - node.name="elastic_stack_logging_data"
      - discovery.zen.minimum_master_nodes=1
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
    volumes: 
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://localhost:9200 || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5     
    networks:
      - poc-elastic-network
  ########################################################## Kibana
  kibana:
    container_name: Kibana
    hostname: kibana
    image: docker.elastic.co/kibana/kibana:7.13.0-amd64
    environment:
      - server.name=kibana
      - server.host="0"
      - elasticsearch.url=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://localhost:5601/ || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5     
    networks:
      - poc-elastic-network
  ########################################################## LogStash
  logstash:
    container_name: LogStash
    hostname: logstash
    build: 
      context: ./logstash
    command: logstash -f /config/logstash.conf  
    depends_on:
      - rabbitmq
      - elasticsearch
    networks:
      - poc-elastic-network  
  ########################################################## MetricBeat
  # metricbeat:
  #   container_name: MetricBeat
  #   hostname: metricbeat
  #   build: 
  #     context: ./beat/metricbeat
  #   user: root
  #   volumes:      
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   depends_on:
  #     - elasticsearch
  #     - kibana
  #     - rabbitmq
  #   restart: on-failure
  #   networks:
  #     - log
  # ########################################################## HeartBeat
  # heartbeat:
  #   container_name: HeartBeat
  #   hostname: heartbeat
  #   build: 
  #     context: ./beat/heartbeat
  #   depends_on:
  #     - elasticsearch
  #     - kibana
  #   restart: on-failure
  #   networks:
  #     - log
  ########################################################## APM
  apm:
    container_name: APM
    hostname: apm
    build: 
      context: ./apm
    depends_on:
      - elasticsearch
      - kibana
    ports:
      - "8200:8200"
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://localhost:8200 || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5         
    restart: on-failure
    networks:
      - poc-elastic-network
  ########################################################## ElasticHQ
  # elastichq:
  #   container_name: ElasticHQ
  #   hostname: elastichq
  #   build: 
  #     context: ./elastichq
  #   depends_on:
  #     - elasticsearch
  #   ports:
  #     - "5000:5000"
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -I -s -L http://localhost:5000 || exit 1"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 5           
  #   restart: on-failure
  #   networks:
  #     - poc-elastic-network


volumes:
  rabbitmq_data:
  elasticsearch_data:

networks:
  poc-elastic-network:
    external:
      name: poc-elastic-network
    driver: bridge